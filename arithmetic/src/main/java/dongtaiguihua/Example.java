package dongtaiguihua;

/**
 *
 *
 * @author Levy Zhao
 * @since 2021-04-07 17:25
 **/
public class Example {

//    这里还是拿 Quora 上面的例子来讲解，“1+1+1+1+1+1+1+1” 得出答案是 8，那么如何快速计算 “1+ 1+1+1+1+1+1+1+1”，我们首先可以对这个大的问题进行拆解，
//    这里我说的大问题是 9 个 1 相加，这个问题可以拆解成 1 + “8 个 1 相加的答案”，8 个 1 相加继续拆，可以拆解成 1 + “7 个 1 相加的答案”，
//    … 1 + “0 个 1 相加的答案”，到这里，第一个步骤 已经完成。
//
//    状态定义 其实是需要思考在解决一个问题的时候我们做了什么事情，然后得出了什么样的答案，对于这个问题，当前问题的答案就是当前的状态，
//    基于上面的问题拆解，你可以发现两个相邻的问题的联系其实是 后一个问题的答案 = 前一个问题的答案 + 1，这里，状态的每次变化就是 +1。
//
//    定义好了状态，递推方程就变得非常简单，就是 dp[i] = dp[i - 1] + 1，这里的 dp[i] 记录的是当前问题的答案，也就是当前的状态，
//    dp[i - 1] 记录的是之前相邻的问题的答案，也就是之前的状态，它们之间通过 +1 来实现状态的变更。
//
//    最后一步就是实现了，有了状态表示和递推方程，实现这一步上需要重点考虑的其实是初始化，就是用什么样的数据结构，根据问题的要求需要做那些初始值的设定。

    static int dpExample(int[] nums) {
        int len = nums.length;
        int[] arr = new int[len + 1];

        int res = 0;

        for (int i = 1; i <= len; i++) {
            arr[i] = arr[i - 1] + nums[i - 1];
        }
        return arr[len];
    }

    public static void main(String[] args) {
        int[] nums = {1, 2, 5, 7, 6, 3, 1, 2, 3};
//        int[] nums = {1, 1, 1, 1, 1, 1, 1, 1};
        int i = dpExample(nums);
        System.out.println(i);
    }

}
